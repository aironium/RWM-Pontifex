[comment_intro]
This is the explanation of the mechanics: https://youtu.be/dQw4w9WgXcQ?si=ul2V1fhwzoCIWV8O


[core]
autoTriggerCooldownTime: 0.0001s
autoTriggerCooldownTime_allowDangerousHighCPU: true
name: ptfx_gateway
displayText: Pontifex Gateway
displayDescription: -Virtual bridge system. Bends and stretches timespace to transport matter to another land mass.\n-Automatically seeks nearest landmass across.\n-Significantly increases the movement speed of the unit that crosses the bridge! Units are unselectable while crossing. They can still attack and are still vulnerable.\n\nBridge Direction Priorities: Top <- Right <- Bottom <- Left\n\nWarning: New gateways that overlap older ones will self-destruct. Pointing it to the void will cause self-destruction. Losing its dedicated pair will cause self-destruction. Keep out of reach of children and pets.
class: CustomUnitMetadata

radius: 40
price: 2500
maxHp: 3000
mass: 9000
tags: bridge, gateway
techLevel: 1
buildSpeed: 30s

builtFrom_1_name: builder, combatEngineer, mechEngineer
builtFrom_1_isLocked: if self.isControlledByAI()

isBio: false
isBuilding: true
softCollisionOnAll: 5
explodeOnDeath: true

disableAllUnitCollisions: true
constructionFootprint: 0,0,0,0
footprint: -1,-1,1,1

transportUnitsAddUnloadOption: false
maxTransportingUnits: 50
transportUnitsEachUnitAlwaysUsesSingleSlot: true
transportUnitsBlockOtherTransports: false
@memory unloadTimer:number
@memory cycle:number
@memory cyclePong:bool
@memory messageLock:bool

updateUnitMemory: unloadTimer = select(memory.unloadTimer > 0, memory.unloadTimer - 0.05, memory.unloadTimer), cyclePong = select(memory.cycle == 0, false, select(memory.cycle == 50, true, memory.cyclePong)), cycle = select(memory.cyclePong == false, memory.cycle + 1, memory.cycle - 1), unloadTimer = select(memory.unloadTimer < 0, 0, memory.unloadTimer)
updateUnitMemoryRate: 0.2

displayText_tr: Pontifex Geçiti 

displayDescription_tr: -Sanal köprü sistemi. Birimi başka bir kara parçasına taşımak için zaman alanını büker ve uzatır.\n-Otomatik olarak en yakın kara parçasını arar.\n-Köprüden geçen birimin hareket hızını önemli ölçüde artırır! Geçiş sırasında birimler seçilemez. Hâlâ saldırabilirler ve savunmasızdırlar.\n\nKöprü Yönü Öncelikleri: Üst <- Sağ <- Alt <- Sol\n\nUyarı: Eski geçitleriyle çakışan yeni geçitleri kendi kendini yok edecektir. Onu boşluğa işaret etmek kendi kendini yok etmeye neden olur. Adanmış çiftini kaybetmek kendi kendini yok etmeye neden olur. Çocuklardan ve evcil hayvanlardan uzak tutun.

displayText_uk: Міст Pontifex
displayDescription_uk: -Система віртуального мосту. Деформує та розтягує часопростір, щоб переправити матерію на іншу сторону.\n-Автоматично шукає найближчий берег.\n-Значно збільшує швидкість одиниці під час перетинання мосту! Одиниці не можна вибрати під час перетину. Вони все ще можуть атакувати та залишаються вразливими.\n\nПріоритети напрямків мосту: Вгору <- Праворуч <- Вниз <- Ліворуч\n\nУвага: Нові мости, які перекривають старі, самознищаться. Спрямування його на порожнечу призведе до самознищення. Знищення одного з кінців мосту призведе до самознищення. Зберігати в недоступному для дітей та домашніх тварин місці.

[decal_indicatorNo]
isVisible: if memory.waterDir == "none"
alpha: 1 * (select(memory.cycle > 0, memory.cycle * 0.05, 0))
image: no.png
layer: beforeUI
imageScale: 0.65

[decal_dirIndicator]
isVisible: if memory.waterDir != "none"
alpha: 1 * (select(memory.cycle > 0, memory.cycle * 0.05, 0))
image: dir.png
layer: beforeUI
imageScale: 0.35
basePosition: """
createMarker(x = self.x,
y = self.y,
dir = select(memory.waterDir == "top", -90,
select(memory.waterDir == "bottom", 90,
select(memory.waterDir == "left", 180,
select(memory.waterDir == "right", 0, 0)))))
"""

[hiddenAction_eject]
autoTrigger: if self.transportingCount() > 0 and memory.waterDir == "none"
forceUnloadTransportNow: true

[hiddenAction_overlapError]
autoTrigger: if self.nearestUnit(withTag="gateway", withinRange=30, relation="any") != nullUnit and (self.nearestUnit(withTag="gateway", withinRange=30, relation="any").timeAlive() > self.timeAlive())
addResources: hp = -100
alsoTriggerAction: message_overlap

[hiddenAction_message_overlap]
requireConditional: if memory.messageLock == false
setUnitMemory: messageLock = true
showQuickWarLogToPlayer: An overlap event happened. Self destructing...
showQuickWarLogToPlayer_uk: Стався конфлікт мостів. Самознищення...
showQuickWarLogToPlayer_tr: Bir çakışma olayı gerçekleşti. Kendi kendini imha ediyor... 

[attachment_dock1]
x: 0
y: 0
isUnselectable: true
addTransportedUnits: true
resetRotationWhenNotAttacking: true
idleDir: 0
height: 0
setDrawLayerOnBottom: false
isVisible: true
canBeAttackedAndDamaged: true
canAttack: true
rotateWithParent: true

[ai]
useAsTransport: true

[turret_emitter]
x: 0
y: 0
canShoot: false
projectile: 1

[projectile_1]
life: 10
instant: true
targetGround: true
areaDamage: 0
explodeEffect: NONE
deflectionPower: -1
#unloadUpToXUnitsFromSource: 1

spawnUnit: ptfx_wrapper(transportedUnitsToTransfer=1)

[projectile_2]
life: 10
instant: true
targetGround: true
areaDamage: 0
explodeEffect: NONE
deflectionPower: -1
spawnUnit: ptfx_gateway

[graphics]
total_frames: 1
image: null.png
image_wreak: wreak_gateway.png
image_shadow: AUTO
drawLayer: bottom
showTransportBar: false

[attack]
canAttack: false
canAttackFlyingUnits: false
canAttackLandUnits:   false
canAttackUnderwaterUnits: false
turretSize: 10
turretTurnSpeed: 0
maxAttackRange: 0
shootDelay: 0

[placementRule_3by3]
searchTags: bridge
searchTeam: any
searchDistance: 80
maxCount: 0
cannotPlaceMessage: Maintain gateway distance
cannotPlaceMessage_tr: Geçit mesafesini koru

[movement]
movementType: LAND
targetHeight: 0
targetHeightDrift: 0
moveSpeed: 0
moveAccelerationSpeed: 0
moveDecelerationSpeed: 0
maxTurnSpeed: 0
turnAcceleration: 0

[template_waterDetect]
image:chevron.png
dirOffset: ${dir}
isVisible: if self.getOffsetRelative(x=${wtrX}, y=${wtrY}).isOverWater == true
onlyInPreview: true

[decal_wtrT]
@copyFromSection: template_waterDetect
@define dir: 0
@define wtrX: 0
@define wtrY: 40

[decal_wtrR]
@copyFromSection: template_waterDetect
@define dir: 90
@define wtrX: 40
@define wtrY: 0

[decal_wtrB]
@copyFromSection: template_waterDetect
@define dir: 180
@define wtrX: 0
@define wtrY: -40

[decal_wtrL]
@copyFromSection: template_waterDetect
@define dir: -90
@define wtrX: -40
@define wtrY: 0

[decal_gateway]
onlyWhileAlive: true
image: gateway.png
teamColors: true
layer: shadow
order: 55

[decal_gateway_wreak]
layer: shadow
onlyWhileAlive: false
image: wreak_gateway.png
order: 30
imageScale: 1.125
isVisible: if self.hp < 1

[template_legDecal]
onlyOnNonPreview: true
onlyWhileAlive: true
teamColors: true
image: leg.png
dirOffset: ${corner}
layer: shadow
order: 40
isVisible: if self.getOffsetRelative(x=${wtrX}, y=${wtrY}).isOverwater() == false

[decal_legTL]
@copyFromSection: template_legDecal
@define corner: 0
@define wtrX: -40
@define wtrY: 40

[decal_legTR]
@copyFromSection: template_legDecal
@define corner: 90
@define wtrX: 40
@define wtrY: 40

[decal_legBL]
@copyFromSection: template_legDecal
@define corner: -90
@define wtrX: -40
@define wtrY: -40

[decal_legBR]
@copyFromSection: template_legDecal
@define corner: 180
@define wtrX: 40
@define wtrY: -40


[template_legDecal_wreak]
onlyOnNonPreview: true
teamColors: true
onlyWhileAlive: false
image: wreak_leg.png
dirOffset: ${corner}
layer: shadow
order: 20
isVisible: if self.getOffsetRelative(x=${wtrX}, y=${wtrY}).isOverwater() == false and  self.hp < 1
imageScale: 0.75

[decal_legTL_W]
@copyFromSection: template_legDecal_wreak
@define corner: 0
@define wtrX: -40
@define wtrY: 40

[decal_legTR_W]
@copyFromSection: template_legDecal_wreak
@define corner: 90
@define wtrX: 40
@define wtrY: 40

[decal_legBL_W]
@copyFromSection: template_legDecal_wreak
@define corner: -90
@define wtrX: -40
@define wtrY: -40

[decal_legBR_W]
@copyFromSection: template_legDecal_wreak
@define corner: 180
@define wtrX: 40
@define wtrY: -40

[core]
@memory seekX:number
@memory seekY:number
@memory crossed:bool
@memory receiver:unit

[hiddenAction_seekInit]
autoTriggerOnEvent: created
setUnitMemory: seekX = 0, seekY = 0, crossed = false

[hiddenAction_seekOutBounds]
autoTrigger: if createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY).isInMap() == false
debugMessage: Out of bounds @ (%{self.x + memory.seekX}, %{self.y + memory.seekY})!
addResources: hp = -50
alsoTriggerAction: message_outbounds

[hiddenAction_message_outbounds]
requireConditional: if memory.messageLock == false
setUnitMemory: messageLock = true
showQuickWarLogToPlayer: A Pontifex gateway tries to seek new lands in the void. Self destructing...
showQuickWarLogToPlayer_tr: Bir Pontifex Geçidi, boşlukta yeni topraklar aramaya çalışıyor. Kendi kendini imha ediyor...
showQuickWarLogToPlayer_uk: Міст Pontifex намагається знайти нові землі в порожнечі. Самознищення...

[decal_seekerTest]
image: mark.png
xOffsetAbsolute: memory.seekX
yOffsetAbsolute: memory.seekY
isVisible: false

[decal_bridge]
onlyWhileAlive: true
teamColors: true
isVisible: if memory.waterDir != "none"
onlyWhileActive: true
onlyOnNonPreview: true
onlyWithZoomLevelOrMore: 0
#onlyWhenSelectedByAnyPlayer: true
image: bridge.png
layer: afterBody
order: 300
imageScaleY: 1 * (distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY)) - 55)
#imageScaleX: 0.85
basePosition: """
createMarker(x=self.x + (select(memory.waterDir == "left", distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY))/-2, 
select(memory.waterDir == "right", distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY))/2, 0))) , 

y=self.y +(select(memory.waterDir == "bottom", distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY))/2, 
select(memory.waterDir == "top", distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY))/-2, 0))), 

dir = select(memory.waterDir == "top", 90, select(memory.waterDir == "right", 180, select(memory.waterDir == "bottom", -90, select(memory.waterDir == "left", -0, 0)))))
"""

[decal_bridge_wreak]
@copyFromSection: decal_bridge
onlyWhileAlive: false
image: wreak_bridge.png
alpha: 0.4
imageScaleX: 0.85
isVisible: if self.hp < 1

[hiddenAction_seekNewLands]
autoTrigger: if (memory.waterDir == "left" or memory.waterDir == "right" or memory.waterDir == "top" or memory.waterDir == "bottom") and memory.crossed == false 
# and not customTarget1.tags(includes="gateway")
setUnitMemory: seekY = memory.seekY + select(memory.waterDir == "top", -20, select(memory.waterDir == "bottom", 20, 0)), seekX = memory.seekX + select(memory.waterDir == "right", 20, select(memory.waterDir == "left", -20, 0))

#debugMessage: moving %{memory.waterDir}

[hiddenAction_foundLand]
autoTrigger: if memory.crossed == false and distanceBetween(self, createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY)) > 40 and not createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY).isOverWater and not createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY).isOverClift
# and not customTarget1.tags(includes="gateway")
setUnitMemory: crossed = true,  seekY = memory.seekY + select(memory.waterDir == "top", -20, select(memory.waterDir == "bottom", 20, 0)), seekX = memory.seekX + select(memory.waterDir == "right", 20, select(memory.waterDir == "left", -20, 0))
debugMessage: crossed
alsoTriggerAction: crossPlatform

[hiddenAction_crossPlatform]
fireTurretXAtGround: emitter
fireTurretXAtGround_withProjectile: 2
fireTurretXAtGround_withTarget: createMarker(x=self.x + memory.seekX, y = self.y + memory.seekY)
requireConditional: if not customTarget1.tags(includes="gateway")

[hiddenAction_linkToSource]
autoTriggerOnEvent: created
requireConditional: if customTarget1.tags(includes="gateway")
setUnitMemory: receiver = customTarget1
sendMessageTo: customTarget1
sendMessageWithTags: ptfx_linkRequest
sendMessageWithData: source = self
debugMessage: My parent receiver is %{customTarget1} with coordinates %{customTarget1.x}, %{customTarget1.y}

[hiddenAction_receivedLinkRequest]
autoTriggerOnEvent: newMessage(withTag="ptfx_linkRequest")
setUnitMemory: receiver = eventData(name="source", type="unit")
debugMessage: My offspring receiver is %{memory.receiver} with coordinates %{memory.receiver.x}, %{memory.receiver.y}
showQuickWarLogToPlayer: A Pontifex gateway paired successfully!
showQuickWarLogToPlayer_tr: Bir Pontifex Geçidi başarıyla eşlendi!
showQuickWarLogToPlayer_uk: Міст Pontifex успішно підключено!

[hiddenAction_pairWasDestroyed]
autoTrigger: if memory.crossed == true and memory.receiver.hp < 1 and memory.receiver != nullUnit
addResources: hp = -999999
alsoTriggerAction: message_lostpair

[hiddenAction_message_lostpair]
requireConditional: if memory.messageLock == false
setUnitMemory: messageLock = true
showQuickWarLogToPlayer: A Pontifex gateway lost a pair. Self destructing...
showQuickWarLogToPlayer_uk: Міст Pontifex втратив підключення. Самознищення...
showQuickWarLogToPlayer_tr: Bir Pontifex Geçidi bir çift kaybetti. Kendi kendini imha ediyor...


[hiddenAction_transportTime]
autoTrigger: if self.transportingCount() > 0 and memory.receiver != nullUnit and memory.unloadTimer == 0
fireTurretXAtGround: emitter
fireTurretXAtGround_withProjectile: 1
fireTurretXAtGround_withTarget: createMarker(x = self.x, y = self.y)
setUnitMemory: unloadTimer = 1

[core]
@memory waterDir:string


[hiddenAction_parentMirror]
autoTrigger: if (customTarget1.tags(includes="gateway") == true and customTarget1 != nullUnit) and (memory.waterDir == null or memory.waterDir == "")
setUnitMemory: """
waterDir = select(customTarget1.readUnitMemory(name="waterDir", type="string") == "top", "bottom", 
select(customTarget1.readUnitMemory(name="waterDir", type="string") == "bottom", "top", 
select(customTarget1.readUnitMemory(name="waterDir", type="string") == "left", "right", 
select(customTarget1.readUnitMemory(name="waterDir", type="string") == "right", "left", "none"))))
"""
debugMessage: mirrored priority set to direction -> %{memory.waterDir}

[hiddenAction_prioritySet]
autoTrigger: if memory.waterDir == null or memory.waterDir == "" and not customTarget1.tags(includes="gateway")
setUnitMemory: """
waterDir = select(getOffsetRelative(x=0,y=40).isOverWater == true, "top",
select(getOffsetRelative(x=40,y=0).isOverWater == true, "right",
select(getOffsetRelative(x=0,y=-40).isOverWater == true, "bottom",
select(getOffsetRelative(x=-40,y=0).isOverWater == true, "left", "none"))))
"""
debugMessage: priority set to direction -> %{memory.waterDir}


[template_joints]
layer: afterBody
order: 300
image: gateway_joint.png
dirOffset: ${dirNum}
isVisible: if memory.waterDir == ${dirStr}
onlyOnNonPreview: true

[decal_jointT]
@copyFromSection: template_joints
@define dirNum: 0
@define dirStr: "top"

[decal_joinR]
@copyFromSection: template_joints
@define dirNum: 90
@define dirStr: "right"

[decal_jointB]
@copyFromSection: template_joints
@define dirNum: 180
@define dirStr: "bottom"

[decal_jointL]
@copyFromSection: template_joints
@define dirNum: -90
@define dirStr: "left"

