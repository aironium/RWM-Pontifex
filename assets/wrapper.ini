[core]
name: ptfx_wrapper
class: CustomUnitMetadata
price: 0
maxHp: 300
mass: 1000
displayText: Wrapper
displayDescription: aaaaa
buildSpeed: 15s
techLevel: 1
radius: 1
displayRadius: 15
isBuilding: false
softCollisionOnAll: 2
isBio: false
explodeOnDeath: true
numBitsOnDeath: 0
maxTransportingUnits: 1
transportUnitsEachUnitAlwaysUsesSingleSlot: true
transportUnitsBlockOtherTransports: false
tags: wrapper
transportUnitsKillOnDeath: false
autoTriggerCooldownTime:0.005s
autoTriggerCooldownTime_allowDangerousHighCPU: true
#exit_moveAwayAmount: 200
showInEditor: false
disableAllUnitCollisions: true
canNotBeDamaged: true
isUnselectable: true
@memory origin:unit
@memory target:unit
@memory originDir:string

[attachment_dock1]
lockLegMovement: false
x: 0
y: 0
isUnselectable: true
addTransportedUnits: true
resetRotationWhenNotAttacking: true
idleDir: 0
height: 0
setDrawLayerOnBottom: false
isVisible: true
canBeAttackedAndDamaged: true
canAttack: true
rotateWithParent: true

[ai]
useAsTransport: true

[graphics]
total_frames: 1
image: null.png
#image: wrapper.png
image_wreak:  NONE
image_turret: NONE
image_shadow: NONE
shadowOffsetX:1
shadowOffsetY:1
isVisible: true
drawLayer: top
rotate_with_direction: false
animation_direction_units: 360
animation_direction_starting: 90
showTransportBar: false
dustEffect: true

[hiddenAction_transportingWhileBridgeBroken]
autoTrigger: if (memory.origin.hp < 1 or memory.target.hp < 1) and self.transportingCount > 0
addResources: hp = -100

[attack]
canAttack: false
canAttackFlyingUnits: false
canAttackLandUnits: true
canAttackUnderwaterUnits: false
maxAttackRange: 0
shootDelay: 1

[hiddenAction_kill]
autoTrigger: if self.transportingCount(lessThan=1)
deleteSelf: true

[hiddenAction_init]
autoTriggerOnEvent: created
setUnitMemory: """
origin = customTarget1, 
target = customTarget1.readUnitMemory(name="receiver", type="unit"), 
originDir = customTarget1.readUnitMemory(name="waterDir", type="string")
"""
debugMessage: wrapper initialize


[hiddenAction_core]
autoTrigger: if distanceBetween(self, createMarker(x = memory.target.x + select(memory.originDir == "right", 20, select(memory.originDir == "left", -20, 0)), y = memory.target.y + select(memory.originDir == "bottom", 20, select(memory.originDir == "top", -20, 0)))) < 10 and self.transportingCount() > 0 
buildSpeed: 0
price: 0
#addResources: hp=-301
forceUnloadTransportNow: true
debugMessage: exit unload
addResources: setFlag=1


[turret_emitter]
x: 0
y: 0
canShoot: false
projectile: 1

[hiddenAction_matchSpeedAndCross]
autoTrigger: if self.transportingCount() > 0 and self.maxMoveSpeed != attachment(slot="dock1").maxMoveSpeed * 2.5
setUnitStats: moveSpeed = attachment(slot="dock1").maxMoveSpeed * 2.5

[hiddenAction_cross]
autoTrigger: if self.hasActiveWaypoint(type="move") == false
clearAllWaypoints: true
addWaypoint_prepend: false
addWaypoint_type: move
addWaypoint_target_fromReference: createMarker(x = memory.target.x + select(memory.originDir == "right", 20, select(memory.originDir == "left", -20, 0)), y = memory.target.y+ select(memory.originDir == "bottom", 20, select(memory.originDir == "top", -20, 0)))


[projectile_1]
life: 10
instant: true
targetGround: true
targetGroundSpread: 5
areaDamage: 0
friendlyFire: only-ignoreEnemy
pushForce: 0.1
pushVelocity: 0.1
unloadUpToXUnitsFromSource: 9999
explodeEffect: NONE
deflectionPower: -1


[movement]
movementType: AIR
moveSpeed: 50
moveAccelerationSpeed: 100
moveDecelerationSpeed: 100
targetHeight: 1
targetHeightDrift: 0
maxTurnSpeed: 10
turnAcceleration: 10
joinsGroupFormations: false
moveIgnoringBody: true


[decal_bridge]
teamColors: true
#isVisible: false
onlyOnNonPreview: true
onlyWithZoomLevelOrMore: 0
#onlyWhenSelectedByAnyPlayer: true
image: bridge.png
layer: beforeBody
order: 1
imageScaleY: 1 * (distanceBetween(memory.target, memory.origin) - 56)
yOffsetAbsolute: """
select(memory.originDir == "top", distanceBetween(memory.target, memory.origin)/-2, 
select(memory.originDir == "bottom", distanceBetween(memory.target, memory.origin)/2, 0))
"""
xOffsetAbsolute: """
select(memory.originDir == "left", distanceBetween(memory.target, memory.origin)/-2, 
select(memory.originDir == "right", distanceBetween(memory.target, memory.origin)/2, 0))
"""




basePosition: """
createMarker(
x = memory.origin.x, 
y = memory.origin.y, 
dir = select(memory.originDir == "top", 90, 
select(memory.originDir == "right", 0, 
select(memory.originDir == "bottom", -90, 
select(memory.originDir == "left", -180, 0)))))
"""
